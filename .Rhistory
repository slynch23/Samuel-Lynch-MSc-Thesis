GCM = str_extract(Scenario, "CM\\d+")
)
# --- STEP 2: GCM medians per SSP ---
gcm_ssp_medians <- long_data %>%
group_by(StartYear, SSP, GCM) %>%
summarise(GCM_Median = median(Flow, na.rm = TRUE), .groups = "drop")
# --- STEP 3: SSP-wide medians ---
ssp_medians <- long_data %>%
group_by(StartYear, SSP) %>%
summarise(SSP_Median = median(Flow, na.rm = TRUE), .groups = "drop")
# --- STEP 4: Plot ---
rp10_plot <- ggplot() +
geom_line(data = gcm_ssp_medians,
aes(x = StartYear, y = GCM_Median, group = interaction(GCM, SSP), color = SSP),
linetype = "dotted", size = 0.8, alpha = 0.6) +
geom_line(data = ssp_medians,
aes(x = StartYear, y = SSP_Median, color = SSP),
size = 1.5) +
scale_color_manual(values = c(
"ssp1" = "#1b9e77",
"ssp3" = "#d95f02",
"ssp5" = "#7570b3"
)) +
labs(
title = "RP10 Low Flows – Solid = SSP Median • Dotted = GCM Medians (colored by SSP)",
x = "Start Year", y = "Flow (m³/s)", color = "SSP"
) +
theme_minimal() +
theme(
legend.position = "bottom",
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
ggsave(
filename = "RP10_Low_Flows_SSP_Comparison.png",
plot = rp10_plot,
path = "C:/Users/lynch/Documents/Supplementary Info",
width = 12,
height = 8,
dpi = 600,
units = "in",
bg = "white"  # <- Ensures white background
)
##############percent change maps
# Load libraries
library(ggplot2)
library(sf)
library(dplyr)
library(readr)
library(viridis)
# Step 1: Load the data
df <- read.csv("median_summary_2080s.csv")
# Step 2: Convert to spatial object
points_sf <- st_as_sf(df, coords = c("Easting", "Northing"), crs = 29902)
# Step 3: Load Ireland shapefile (update the path)
ireland <- st_read("path/to/ireland_shapefile.shp")  # <-- Replace with actual path
# Step 4: Filter NAs
points_sf_bfi <- points_sf %>% filter(!is.na(Median_Pct_BFI))
# Step 5: Plot BFI changes
ggplot() +
geom_sf(data = ireland, fill = "grey95", color = "black") +
geom_sf(data = points_sf_bfi, aes(color = Median_Pct_BFI), size = 3) +
scale_color_viridis_c(
option = "A",  # Perceptual color palette
direction = -1,
name = "% Change BFI"
) +
facet_wrap(~Scenario, nrow = 1) +
labs(
title = "Median % Change in BFI (2080s) by SSP",
x = "", y = ""
) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(size = 16, face = "bold"),
legend.position = "right",
plot.title = element_text(size = 18, face = "bold")
)
# Filter NAs
points_sf_q95 <- points_sf %>% filter(!is.na(Median_Pct_Q95))
# Plot Q95 changes
ggplot() +
geom_sf(data = ireland, fill = "grey95", color = "black") +
geom_sf(data = points_sf_q95, aes(color = Median_Pct_Q95), size = 3) +
scale_color_viridis_c(
option = "A",
direction = -1,
name = "% Change Q95"
) +
facet_wrap(~Scenario, nrow = 1) +
labs(
title = "Median % Change in Q95 (2080s) by SSP",
x = "", y = ""
) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(size = 16, face = "bold"),
legend.position = "right",
plot.title = element_text(size = 18, face = "bold")
)
# Step 1: Load the data
df <- read.csv("median_summary_2080s.csv")
# Step 2: Convert to spatial object
points_sf <- st_as_sf(df, coords = c("Easting", "Northing"), crs = 29902)
# Step 3: Load Ireland shapefile (update the path)
ireland <- st_read("path/to/ireland_shapefile.shp")  # <-- Replace with actual path
# Step 4: Filter NAs
points_sf_bfi <- points_sf %>% filter(!is.na(Median_Pct_BFI))
# Step 5: Plot BFI changes
ggplot() +
geom_sf(data = ireland, fill = "grey95", color = "black") +
geom_sf(data = points_sf_bfi, aes(color = Median_Pct_BFI), size = 3) +
scale_color_viridis_c(
option = "A",  # Perceptual color palette
direction = -1,
name = "% Change BFI"
) +
facet_wrap(~Scenario, nrow = 1) +
labs(
title = "Median % Change in BFI (2080s) by SSP",
x = "", y = ""
) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(size = 16, face = "bold"),
legend.position = "right",
plot.title = element_text(size = 18, face = "bold")
)
# Filter NAs
points_sf_q95 <- points_sf %>% filter(!is.na(Median_Pct_Q95))
# Plot Q95 changes
ggplot() +
geom_sf(data = ireland, fill = "grey95", color = "black") +
geom_sf(data = points_sf_q95, aes(color = Median_Pct_Q95), size = 3) +
scale_color_viridis_c(
option = "A",
direction = -1,
name = "% Change Q95"
) +
facet_wrap(~Scenario, nrow = 1) +
labs(
title = "Median % Change in Q95 (2080s) by SSP",
x = "", y = ""
) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(size = 16, face = "bold"),
legend.position = "right",
plot.title = element_text(size = 18, face = "bold")
)
# Step 1: Load your summary dataset
data <- read_csv("median_summary_2080s.csv")
# Step 2: Convert to spatial object using Irish Transverse Mercator (EPSG:29902)
points_sf <- st_as_sf(data, coords = c("Easting", "Northing"), crs = 29902)
# Step 3: Read Ireland shapefile (change this path to your shapefile)
# You can download from https://data.gov.ie/dataset/country-borders
ireland <- st_read("path/to/ireland_shapefile.shp")  # <- replace this!
# Step 4: Plot Median % Change in Q95 by SSP
ggplot() +
geom_sf(data = ireland, fill = "grey95", color = "black") +
geom_sf(data = points_sf, aes(color = Median_Pct_Q95), size = 2) +
scale_color_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0,
name = "% Change Q95") +
facet_wrap(~Scenario) +
labs(title = "Median % Change in Q95 (2080s) by SSP") +
theme_minimal() +
theme(legend.position = "right")
# Step 5: Plot Median % Change in BFI by SSP
ggplot() +
geom_sf(data = ireland, fill = "grey95", color = "black") +
geom_sf(data = points_sf, aes(color = Median_Pct_BFI), size = 2) +
scale_color_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0,
name = "% Change BFI") +
facet_wrap(~Scenario) +
labs(title = "Median % Change in BFI (2080s) by SSP") +
theme_minimal() +
theme(legend.position = "right")
# Step 1: Load the data
df <- read.csv("median_summary_2080s.csv")
# Step 2: Convert to spatial object
points_sf <- st_as_sf(df, coords = c("Easting", "Northing"), crs = 29902)
# Step 3: Load Ireland shapefile (update the path)
ireland <- st_read("path/to/ireland_shapefile.shp")  # <-- Replace with actual path
# Step 4: Filter NAs
points_sf_bfi <- points_sf %>% filter(!is.na(Median_Pct_BFI))
# Step 5: Plot BFI changes
ggplot() +
geom_sf(data = ireland, fill = "grey95", color = "black") +
geom_sf(data = points_sf_bfi, aes(color = Median_Pct_BFI), size = 3) +
scale_color_viridis_c(
option = "A",  # Perceptual color palette
direction = -1,
name = "% Change BFI"
) +
facet_wrap(~Scenario, nrow = 1) +
labs(
title = "Median % Change in BFI (2080s) by SSP",
x = "", y = ""
) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(size = 16, face = "bold"),
legend.position = "right",
plot.title = element_text(size = 18, face = "bold")
)
# Filter NAs
points_sf_q95 <- points_sf %>% filter(!is.na(Median_Pct_Q95))
# Plot Q95 changes
ggplot() +
geom_sf(data = ireland, fill = "grey95", color = "black") +
geom_sf(data = points_sf_q95, aes(color = Median_Pct_Q95), size = 3) +
scale_color_viridis_c(
option = "A",
direction = -1,
name = "% Change Q95"
) +
facet_wrap(~Scenario, nrow = 1) +
labs(
title = "Median % Change in Q95 (2080s) by SSP",
x = "", y = ""
) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(size = 16, face = "bold"),
legend.position = "right",
plot.title = element_text(size = 18, face = "bold")
)
##############percent change maps
# Load libraries
library(ggplot2)
library(sf)
library(dplyr)
library(readr)
library(viridis)
# Step 1: Load the data
df <- read.csv("median_summary_2080s.csv")
# Step 2: Convert to spatial object
points_sf <- st_as_sf(df, coords = c("Easting", "Northing"), crs = 29902)
# Step 3: Load Ireland shapefile (update the path)
ireland <- st_read("path/to/ireland_shapefile.shp")  # <-- Replace with actual path
# Step 4: Filter NAs
points_sf_bfi <- points_sf %>% filter(!is.na(Median_Pct_BFI))
# Step 5: Plot BFI changes
ggplot() +
geom_sf(data = ireland, fill = "grey95", color = "black") +
geom_sf(data = points_sf_bfi, aes(color = Median_Pct_BFI), size = 3) +
scale_color_viridis_c(
option = "A",  # Perceptual color palette
direction = -1,
name = "% Change BFI"
) +
facet_wrap(~Scenario, nrow = 1) +
labs(
title = "Median % Change in BFI (2080s) by SSP",
x = "", y = ""
) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(size = 16, face = "bold"),
legend.position = "right",
plot.title = element_text(size = 18, face = "bold")
)
# Filter NAs
points_sf_q95 <- points_sf %>% filter(!is.na(Median_Pct_Q95))
# Plot Q95 changes
ggplot() +
geom_sf(data = ireland, fill = "grey95", color = "black") +
geom_sf(data = points_sf_q95, aes(color = Median_Pct_Q95), size = 3) +
scale_color_viridis_c(
option = "A",
direction = -1,
name = "% Change Q95"
) +
facet_wrap(~Scenario, nrow = 1) +
labs(
title = "Median % Change in Q95 (2080s) by SSP",
x = "", y = ""
) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(size = 16, face = "bold"),
legend.position = "right",
plot.title = element_text(size = 18, face = "bold")
)
library(rnaturalearth)
library(rnaturalearthdata)
ireland <- ne_countries(scale = "medium", country = "Ireland", returnclass = "sf")
ireland <- st_transform(ireland, crs = 29902)  # match with your CRS
# Step 4: Filter NAs
points_sf_bfi <- points_sf %>% filter(!is.na(Median_Pct_BFI))
# Step 5: Plot BFI changes
ggplot() +
geom_sf(data = ireland, fill = "grey95", color = "black") +
geom_sf(data = points_sf_bfi, aes(color = Median_Pct_BFI), size = 3) +
scale_color_viridis_c(
option = "A",  # Perceptual color palette
direction = -1,
name = "% Change BFI"
) +
facet_wrap(~Scenario, nrow = 1) +
labs(
title = "Median % Change in BFI (2080s) by SSP",
x = "", y = ""
) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(size = 16, face = "bold"),
legend.position = "right",
plot.title = element_text(size = 18, face = "bold")
)
# Filter NAs
points_sf_q95 <- points_sf %>% filter(!is.na(Median_Pct_Q95))
# Plot Q95 changes
ggplot() +
geom_sf(data = ireland, fill = "grey95", color = "black") +
geom_sf(data = points_sf_q95, aes(color = Median_Pct_Q95), size = 3) +
scale_color_viridis_c(
option = "A",
direction = -1,
name = "% Change Q95"
) +
facet_wrap(~Scenario, nrow = 1) +
labs(
title = "Median % Change in Q95 (2080s) by SSP",
x = "", y = ""
) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(size = 16, face = "bold"),
legend.position = "right",
plot.title = element_text(size = 18, face = "bold")
)
############
#cliffs delta scores map
# Load libraries
library(readxl)
library(dplyr)
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
library(patchwork)
# Load Cliff's Delta data
data <- read.excel("combined_all_sheets.xlsx")
# Convert to sf: Irish Grid (EPSG:29903) -> WGS84 (EPSG:4326)
data_sf <- st_as_sf(data, coords = c("Easting", "Northing"), crs = 29903)
# Load Cliff's Delta data
data <- read_excel("combined_all_sheets.xlsx")
# Convert to sf: Irish Grid (EPSG:29903) -> WGS84 (EPSG:4326)
data_sf <- st_as_sf(data, coords = c("Easting", "Northing"), crs = 29903)
data_sf <- st_transform(data_sf, crs = 4326)
# Get Ireland outline
ireland <- ne_countries(scale = "medium", country = "Ireland", returnclass = "sf")
ireland <- st_transform(ireland, crs = 4326)
# Subset datasets for plotting
q95_ssp5 <- data_sf %>% filter(Indicator == "Pct_Q95", Comparison == "SSP5 vs SSP1")
q95_ssp3 <- data_sf %>% filter(Indicator == "Pct_Q95", Comparison == "SSP3 vs SSP1")
bfi_ssp5 <- data_sf %>% filter(Indicator == "Pct_BFI", Comparison == "SSP5 vs SSP1")
bfi_ssp3 <- data_sf %>% filter(Indicator == "Pct_BFI", Comparison == "SSP3 vs SSP1")
# Function to create warm-colored Cliff's Delta maps (-0.5 to -1)
make_map <- function(data, title) {
ggplot() +
geom_sf(data = ireland, fill = NA, color = "grey40") +
geom_sf(data = data, aes(color = cliffs_delta), size = 3) +
scale_color_gradientn(
colours = c("#7f3b08", "#b35806", "#e08214", "#fdb863", "#fee0b6", "#ffffbf"),
values = scales::rescale(seq(-1, -0.5, length.out = 6)),
limits = c(-1, -0.5),
oob = scales::squish,
name = "Cliff's Δ"
) +
labs(title = title) +
theme_minimal() +
theme(
plot.title = element_text(size = 13, face = "bold"),
legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
)
}
# Create the four maps
map_q95_ssp5 <- make_map(q95_ssp5, "Pct_Q95 – SSP5 vs SSP1")
map_q95_ssp3 <- make_map(q95_ssp3, "Pct_Q95 – SSP3 vs SSP1")
map_bfi_ssp5 <- make_map(bfi_ssp5, "Pct_BFI – SSP5 vs SSP1")
map_bfi_ssp3 <- make_map(bfi_ssp3, "Pct_BFI – SSP3 vs SSP1")
# Combine into 2x2 layout
combined_map <- (map_q95_ssp5 | map_q95_ssp3) / (map_bfi_ssp5 | map_bfi_ssp3)
# Display
combined_map
# Optionally save
ggsave("Combined_Cliffs_Delta_Maps_Orange_Yellow.png", plot = combined_map,
width = 14, height = 10, dpi = 300, bg = "white")
##########7 outlier catchment Wilcoxon Test and Analysis
# Load required library
library(dplyr)
# Load your full dataset
df <- read.csv("stations_full.csv")
# Define the 7 catchments of interest
focus_ids <- c(12001, 16011, 16008, 25001, 27002, 36019, 25006)
# Corrected assignment of focus group
df$FocusGroup <- ifelse(df$Station.No. %in% focus_ids, "Focus", "Other")
# Exclude non-descriptor columns
excluded_cols <- c("Station.No.", "Period", "Comparison", "Indicator", "cliffs_delta", "FocusGroup")
descriptor_vars <- df %>%
select(where(is.numeric)) %>%
select(-any_of(excluded_cols))
# Run Wilcoxon test for each descriptor
wilcox_results <- sapply(names(descriptor_vars), function(var) {
test <- wilcox.test(df[[var]] ~ df$FocusGroup)
c(W = test$statistic, p = test$p.value)
}) %>%
t() %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable") %>%
arrange(p)
# Print sorted results
print(wilcox_results)
library(dplyr)
# Load your dataset
df <- read.csv("stations_full.csv")
# Define focus catchments
focus_ids <- c(12001, 16011, 16008, 25001, 27002, 36019, 25006)
# Create FocusGroup label
df$FocusGroup <- ifelse(df$`Station.No.` %in% focus_ids, "Focus", "Other")
# List of descriptor columns (excluding metadata and cliffs_delta)
excluded_cols <- c("Station.No.", "Period", "Comparison", "Indicator", "cliffs_delta", "FocusGroup")
descriptor_vars <- df %>%
select(where(is.numeric)) %>%
select(-any_of(excluded_cols)) %>%
names()
# Compute medians for each variable by group
medians <- df %>%
group_by(FocusGroup) %>%
summarise(across(all_of(descriptor_vars), median, na.rm = TRUE)) %>%
t() %>%
as.data.frame()
# Clean up row and column names
colnames(medians) <- medians[1, ]
medians <- medians[-1, ]
medians <- tibble::rownames_to_column(medians, var = "Variable")
print(medians)
#######Spearman Correlation Analysis for Cliffs Delta Scores
cols <- read.csv("stations_full.csv")
str(cols)
# Load required libraries
library(dplyr)
library(tidyr)
# Define exclusions
excluded_cols <- c("Station.No.", "Period", "Comparison", "Indicator", "cliffs_delta")
# Identify numeric predictor columns
numeric_cols <- cols %>%
select(where(is.numeric)) %>%
select(-any_of(excluded_cols)) %>%
colnames()
# Create all Comparison + Indicator combinations of interest
combos <- cols %>%
filter(Comparison %in% c("SSP5 vs SSP1", "SSP3 vs SSP1"),
Indicator %in% c("Pct_Q95", "Pct_BFI")) %>%
select(Comparison, Indicator) %>%
distinct()
# Initialize list to store correlation results
all_correlations <- list()
# Loop through each combo and compute correlations
for(i in 1:nrow(combos)) {
comp <- combos$Comparison[i]
ind <- combos$Indicator[i]
subset_data <- cols %>%
filter(Comparison == comp, Indicator == ind)
cor_values <- sapply(numeric_cols, function(col) {
cor(subset_data[[col]], subset_data$cliffs_delta, method = "spearman")
})
cor_df <- data.frame(
Variable = names(cor_values),
Spearman_Correlation = as.numeric(cor_values),
Comparison = comp,
Indicator = ind
)
all_correlations[[length(all_correlations) + 1]] <- cor_df
}
# Combine and sort all results
final_correlations <- bind_rows(all_correlations) %>%
arrange(Indicator, Comparison, desc(abs(Spearman_Correlation)))
# View the results
print(final_correlations)
####Spearman Correlation Analysis for median percentage changes
mediancol <- read.csv("median_summary_2080s.csv")
str(mediancol)
library(dplyr)
# Define target variables for correlation
indicator_vars <- c("Median_Pct_Q95", "Median_Pct_BFI")
# Split data by Scenario
split_data <- group_split(mediancol, Scenario)
# Calculate correlations per Scenario
cor_by_scenario <- lapply(split_data, function(df) {
numeric_data <- df %>%
select(where(is.numeric)) %>%
select(-Catchment)
result <- sapply(indicator_vars, function(ind) {
sapply(numeric_data %>% select(-all_of(indicator_vars)), function(x) {
cor(x, numeric_data[[ind]], method = "spearman", use = "complete.obs")
})
})
# Add Scenario name
scenario_name <- unique(df$Scenario)
result_df <- as.data.frame(result)
result_df$Variable <- rownames(result)
result_df$Scenario <- scenario_name
result_df
})
# Combine all results into one data frame
cor_all <- bind_rows(cor_by_scenario)
# View result
print(cor_all)
